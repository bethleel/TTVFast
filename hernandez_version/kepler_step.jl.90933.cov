        - include("kepler_solver_derivative.jl")
        - 
        - # Takes a single kepler step, calling Wisdom & Hernandez solver
        - # 
        - function kepler_step!(gm::Float64,h::Float64,state0::Array{Float64,1},state::Array{Float64,1})
        - # compute beta, r0, dr0dt, get x/v from state vector & call correct subroutine
  5816160 x0 = zeros(Float64,3)
  5816160 v0 = zeros(Float64,3)
  5816160 for k=1:3
 17448480   x0[k]=state0[k+1]
 17448480   v0[k]=state0[k+4]
        - end
        - #  x0=state0[2:4]
  5816160   r0 = sqrt(x0[1]*x0[1]+x0[2]*x0[2]+x0[3]*x0[3])
        - #  v0 = state0[5:7]
  5816160   dr0dt = (x0[1]*v0[1]+x0[2]*v0[2]+x0[3]*v0[3])/r0
  5816160   beta0 = 2.0*gm/r0-(v0[1]*v0[1]+v0[2]*v0[2]+v0[3]*v0[3])
  5816160   s0=state0[11]
  5816160   if beta0 > 0.0
  1454040     iter = kep_elliptic!(x0,v0,r0,dr0dt,gm,h,beta0,s0,state)
        -   else
  4362120     iter = kep_hyperbolic!(x0,v0,r0,dr0dt,gm,h,beta0,s0,state)
        -   end
  5816160 return
        - end
        - 
        - function kepler_step!(gm::Float64,h::Float64,state0::Array{Float64,1},state::Array{Float64,1},jacobian::Array{Float64,2})
        - # compute beta, r0, dr0dt, get x/v from state vector & call correct subroutine
   437386 x0 = zeros(Float64,3)
   437386 v0 = zeros(Float64,3)
   437386 for k=1:3
  1312158   x0[k]=state0[k+1]
  1312158   v0[k]=state0[k+4]
        - end
        - #  x0=state0[2:4]
   437386   r0 = sqrt(x0[1]*x0[1]+x0[2]*x0[2]+x0[3]*x0[3])
        - #  v0 = state0[5:7]
   437386   dr0dt = (x0[1]*v0[1]+x0[2]*v0[2]+x0[3]*v0[3])/r0
   437386   beta0 = 2.0*gm/r0-(v0[1]*v0[1]+v0[2]*v0[2]+v0[3]*v0[3])
   437386   s0=state0[11]
   437386   if beta0 > 0.0
   109347     iter = kep_elliptic!(x0,v0,r0,dr0dt,gm,h,beta0,s0,state,jacobian)
        -   else
   328039     iter = kep_hyperbolic!(x0,v0,r0,dr0dt,gm,h,beta0,s0,state,jacobian)
        -   end
   437386 return
        - end
        - 
